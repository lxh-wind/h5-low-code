---
alwaysApply: true
description: 通用编码标准和最佳实践
---

# 通用编码标准

## 代码风格

1. **缩进和格式化**

   - 使用一致的缩进（推荐 2 或 4 个空格）
   - 行长度限制在 120 字符内
   - 文件末尾保留空行

2. **命名规范**

   - 使用描述性的变量和函数名
   - 避免缩写和模糊的名称
   - 遵循语言特定的命名约定

3. **注释和文档**
   - 为复杂逻辑添加清晰的注释
   - 公共 API 必须有文档注释
   - 保持注释与代码同步

## 代码质量

1. **错误处理**

   - 始终处理可能的错误情况
   - 使用适当的错误处理机制
   - 提供有意义的错误消息

2. **性能考虑**

   - 避免不必要的循环和递归
   - 合理使用缓存和优化
   - 考虑内存使用效率

3. **安全实践**
   - 验证和清理用户输入
   - 避免硬编码敏感信息
   - 使用安全的编码模式

## 代码组织

1. **模块化**

   - 保持函数和类的单一职责
   - 避免过长的函数（建议少于 50 行）
   - 合理组织文件和目录结构

2. **依赖管理**
   - 最小化外部依赖
   - 使用版本锁定
   - 定期更新依赖项

## 版本控制

1. **提交规范**

   - 使用清晰的提交消息
   - 进行原子性提交
   - 定期合并或变基

2. **分支策略**
   - 使用功能分支开发
   - 保持主分支稳定
   - 及时清理废弃分支
