---
alwaysApply: true
---
### 阶段识别与工作流

**🚨 重要规则：** 每个环节完成后都需要由用户进行确认后才可进行下一个环节。

当用户输入新需求时，按照标准软件工程方式独立开展工作，通过以下四个连续阶段指导开发者完成特性开发：

| 目录文件是否存在  | 当前阶段 | 你的主要职责                                             |
| :---------------- | :------- | :------------------------------------------------------- |
| 无文档或新需求    | 需求明确 | 编写 `requirements.md` (用户故事 & EARS 验收标准)        |
| `requirements.md` | 架构设计 | 编写 `design.md` (架构、技术栈、接口/数据模型、测试策略) |
| `design.md`       | 任务规划 | 编写 `tasks.md` (可执行的编码/测试任务清单)              |
| `tasks.md`        | 代码实现 | **一次只执行一个任务**，并更新 `tasks.md` 状态           |

---

### 阶段实施指南

#### 1. 需求明确

- **触发：** 新功能想法、明确梳理需求请求，或相关文档缺失。
- **你的工作：**
  - 从开发者的描述中提取核心功能名（kebab-case 格式）。
  - 首先搞清楚问题和需求，然后再进入下一阶段。
  - 创建并填充 `.cursor/specs/{功能名}/requirements.md`。
  - 内容包含：**用户故事** 和采用 **EARS 语法** 编写的 **验收标准**。
  - 考虑边界、约束、成功标准；若涉及前端，可询问风格/配色。
- **确认：** 💬 "📝 需求已草拟，确认后可以进入架构设计吗？"
- **示例格式 (`requirements.md`)：**

  ```markdown
  # 需求文档

  ## 介绍

  需求描述

  ## 需求

  ### 需求 1 - 需求名称

  **用户故事：** 用户故事内容

  #### 验收标准

  1. 采用 EARS 描述的子句 While <可选前置条件>, when <可选触发器>, the <系统名称> shall <系统响应>，例如 When 选择"静音"时，笔记本电脑应当抑制所有音频输出。
  2. ...
  ```

#### 2. 架构设计

- **触发：** 需求文档已完成并获得开发者的认可。
- **你的工作：**
  - 仔细研读 `requirements.md`。
  - 根据当前技术架构和确认好的需求，进行技术方案设计。
  - 创建并填充 `.cursor/specs/{功能名}/design.md`。
  - 内容包含：概述、架构图（Mermaid 可选）、技术栈、技术选型、数据库/接口设计、测试策略、安全性。
  - 精简但能够准确描述技术架构，必要时可以用 mermaid 来绘图。
- **确认：** 💬 "🛠️ 设计方案已完成，确认后进行任务拆分吗？"

#### 3. 任务规划

- **触发：** 设计文档已完成并获得开发者的认可。
- **你的工作：**
  - 仔细研读 `requirements.md` 和 `design.md`。
  - 根据需求文档和技术方案，细化具体要做的事情。
  - 创建并填充 `.cursor/specs/{功能名}/tasks.md`。
  - 内容为**可执行的编码/测试任务清单**，遵循 **Markdown 复选框列表**格式，包含任务标题、具体细节和相关**需求编号引用**（如 `_需求: 1.1_`）。
  - **只专注涉及编写、修改或测试代码的任务**。明确避免：用户验收测试、部署、性能分析、用户培训、业务流程变更等非编码任务。
  - 每个任务都是离散、可管理的步骤，并按逻辑顺序排列，优先考虑测试驱动开发。
- **确认：** 💬 "📋 任务清单就绪，开始实现第一个任务吗？"
- **示例格式 (`tasks.md`)：**

  ```markdown
  # 实施计划

  - [ ] 1. 任务信息
    - 具体要做的事情
    - ...
    - _需求: 相关的需求点的编号_
  - [ ] 2. 实现用户认证API
    - [ ] 2.1 创建登录路由和控制器
    - [ ] 2.2 实现密码加密和用户验证逻辑
    - _需求: 1.2, 2.1_
  ```

#### 4. 代码实现

- **触发：** 任务清单已完成并获得开发者的认可，或开发者指定执行某个任务。
- **你的工作：**
  - 在执行任务前，**始终确保**已阅读 `requirements.md`、`design.md` 和 `tasks.md`。
  - **严格一次只专注执行一个任务**。
  - 完成后勾选 `tasks.md` 中的对应任务，及时更新任务状态。
  - 如果需要执行多个独立操作，尽可能**并行调用工具**以优化效率。
  - 执行时尽可能独立自主运行，保证效率和质量。
  - 开发者可随时询问任务详情，你将提供信息而不立即执行。
- **确认：** 💬 "✅ 任务 X 完成，继续下一个吗？"（**不会自动继续**，等待开发者的指示）

---

### 异常处理与灵活调整

- **缺前置文档：** 如果开发者要求跳到某个阶段但缺少必要的前序文档，你将解释原因并询问是否需要帮助创建。
- **需求/设计变更：** 在任何阶段，开发者都可以要求修改。你将保留现有工作成果，询问具体修改内容，并在覆盖旧文件前征求确认。
- **随时回退：** 你支持随时回退到任意阶段进行修改或审查。