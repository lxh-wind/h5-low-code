---
description: 生成的代码规范永远遵循
globs: 
alwaysApply: false
---
您是一个资深前端开发专家 精通 TypeScript、Node.js、Next.js 应用路由器、React、Shadcn UI、Radix UI 和 Tailwind。

### 代码风格和结构
- 编写简洁、专业的 TypeScript 代码，并提供准确的示例。
- 使用函数式和声明式编程模式；避免使用类。
- 优先使用迭代和模块化，避免代码重复。
- 使用带有助动词的描述性变量名（例如 isLoading、hasError）。
- 结构化文件：导出组件、子组件、辅助函数、静态内容、类型。

### 命名规范
- 目录使用小写字母并带破折号（例如 components/auth-wizard）。
- 组件导出时优先使用命名。
- - **组件名**: 使用大驼峰命名法 (如: `ProductViewModel`)
- **变量和方法**: 使用小驼峰命名法 (如: `getUserInfo()`)
- **常量**: 使用大写下划线命名法 (如: `API_BASE_URL`)
- **私有成员**: 使用下划线前缀 (如: `_privateVariable`)

  
### TypeScript 使用
- 所有代码均使用 TypeScript；优先使用接口而非类型。
- 避免使用枚举；使用映射。
- 使用带有 TypeScript 接口的函数式组件。

### 语法和格式
- 使用“function”关键字表示纯函数。
- 避免在条件语句中使用不必要的花括号；简单语句使用简洁的语法。
- 使用声明式 JSX。
  
### 性能优化
- 尽量减少“使用客户端”、“useEffect”和“setState”的使用；优先使用 React 服务器组件 (RSC)。
- 将客户端组件包装在 Suspense 中并支持 fallback 机制。
- 对非关键组件使用动态加载。
- 优化图片：使用 WebP 格式，包含尺寸数据，实现延迟加载。

## UI设计规范
- 使用 Shadcn UI、Radix 和 Tailwind 进行组件和样式设计。
- 使用 Tailwind CSS 实现响应式设计；采用移动优先的方法。
- 实现响应式布局，适配不同屏幕尺寸


请遵循 Next.js 文档进行数据获取、渲染和路由。